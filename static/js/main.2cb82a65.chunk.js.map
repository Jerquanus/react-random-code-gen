{"version":3,"sources":["components/Code.js","App.js","reportWebVitals.js","index.js"],"names":["Codegen","props","getCriteria","uppercase","window","confirm","lowercase","symbols","numbers","passlength","prompt","setState","password","newPass","length","charset","value","i","n","charAt","Math","floor","random","state","onClick","this","Component","App","Code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAiGeA,E,kDA5Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,YAAc,WAEZ,IAAMC,EAAYC,OAAOC,QAAQ,qCAC3BC,EAAYF,OAAOC,QAAQ,qCAC3BE,EAAUH,OAAOC,QAAQ,2BACzBG,EAAUJ,OAAOC,QAAQ,2BACzBI,EAAaL,OAAOM,OAAO,6DAGjC,EAAKC,SAAS,CACZR,YACAG,YACAC,UACAC,UACAC,eAGF,IAAMG,EAAW,EAAKC,QAAQ,CAAEV,YAAWG,YAAWC,UAASC,UAASC,eAExE,EAAKE,SAAS,CAAEC,cA9BC,EAkCnBC,QAAU,YAaR,IAbqE,IAA1DV,EAAyD,EAAzDA,UAAWG,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,QACtCM,EADgE,EAAjBL,WAO/CM,GAJaT,EAAY,6BAA+B,KAD3CH,EAAY,6BAA+B,KAEzCI,EAAU,aAAe,KACzBC,EAAU,aAAe,IAIxCQ,EAAQ,GAIHC,EAAI,EAAGC,EAAIH,EAAQD,OAAQG,EAAIH,IAAUG,EAChDD,GAASD,EAAQI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,IAGrD,OAAOF,GAjDP,EAAKO,MAAQ,CAEXpB,WAAW,EACXG,WAAW,EACXC,SAAS,EACTC,SAAS,EACTC,WAAY,GARG,E,0CAoEnB,WAEE,OACE,gCACE,gCACE,gFACA,wDACA,wDACA,qDACA,2CACA,4EAGF,wBAAQe,QAASC,KAAKvB,YAAtB,+BAEA,8BACE,0BAAUc,MAAOS,KAAKF,MAAMX,oB,GArFhBc,aCIPC,MAJf,WACE,OAAO,cAACC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2cb82a65.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Codegen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // initial state for pwd length and all char bools\n      uppercase: true,\n      lowercase: false,\n      symbols: false,\n      numbers: false,\n      passlength: 5,\n    };\n  }\n  getCriteria = () => {\n    // ask all prompts and confirms preceded by window.\n    const uppercase = window.confirm('Would you like uppercase letters?')\n    const lowercase = window.confirm('Would you like lowercase letters?')\n    const symbols = window.confirm('Would you like symbols?')\n    const numbers = window.confirm('Would you like numbers?')\n    const passlength = window.prompt('How many characters would you like your password to have?')\n\n    // this.setState({}) all the values from above\n    this.setState({\n      uppercase,\n      lowercase,\n      symbols,\n      numbers,\n      passlength,\n    });\n\n    const password = this.newPass({ uppercase, lowercase, symbols, numbers, passlength })\n\n    this.setState({ password })\n  }\n  // add all your methods for generating a password from the above state\n\n  newPass = ({ uppercase, lowercase, symbols, numbers, passlength }) => {\n    var length = passlength\n    let upperAlpha = uppercase ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' : ''\n    let lowerAlpha = lowercase ? 'abcdefghijklmnopqrstuvwxyz' : ''\n    let finalSymbols = symbols ? '!@#$%^&*()' : ''\n    let finalNumbers = numbers ? '0123456789' : ''\n\n    let charset = lowerAlpha + upperAlpha + finalSymbols + finalNumbers\n    // console.log('charset', charset)\n    let value = ''\n\n    //  perform ++i increment before operation\n    //  need a way to control the length \n    for (var i = 0, n = charset.length; i < length; ++i) {\n      value += charset.charAt(Math.floor(Math.random() * n))\n    }\n    // console.log('swann done', value)\n    return value\n  }\n\n  // newPass = ({ getCharacters }) => {\n  //   let charset = lowerAlpha + upperAlpha + finalSymbols + finalNumbers\n  //   console.log('charset', charset)\n  //   let value = ''\n\n  //   //  perform ++i increment before operation\n  //   //  need a way to control the length \n  //   for (var i = 0, n = charset.length; i < length; ++i) {\n  //     value += charset.charAt(Math.floor(Math.random() * n))\n  //   }\n  //   console.log('swann done', value)\n  //   return value\n  // }\n\n  render() {\n    // run all the above methods to calculate the password before rendering    \n    return (\n      <div>\n        <div>\n          <h1> What would you like your password to contain?</h1>\n          <h3> Uppercase Characters?</h3>\n          <h3> Lowercase Characters?</h3>\n          <h3> Symbol Characters?</h3>\n          <h3> Numbers?</h3>\n          <h2> How long would you like your password?</h2>\n        </div>\n\n        <button onClick={this.getCriteria}>Generate Password</button>\n\n        <div>\n          <textarea value={this.state.password}></textarea>\n        </div>\n\n      </div>\n    )\n  }\n}\n// https://zoom.us/j/3471110935?pwd=alk4SWJjdEh4Qk1RNVg2L0xCemUvQT09#success\nexport default Codegen;","import React from \"react\";\nimport './App.css';\nimport Codegen from './components/Code.js'\n\nfunction App() {\n  return <Codegen />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}